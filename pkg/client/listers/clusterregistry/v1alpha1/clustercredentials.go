/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/cluster-registry/pkg/apis/clusterregistry/v1alpha1"
)

// ClusterCredentialsLister helps list ClusterCredentialses.
type ClusterCredentialsLister interface {
	// List lists all ClusterCredentialses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCredentials, err error)
	// ClusterCredentialses returns an object that can list and get ClusterCredentialses.
	ClusterCredentialses(namespace string) ClusterCredentialsNamespaceLister
	ClusterCredentialsListerExpansion
}

// clusterCredentialsLister implements the ClusterCredentialsLister interface.
type clusterCredentialsLister struct {
	indexer cache.Indexer
}

// NewClusterCredentialsLister returns a new ClusterCredentialsLister.
func NewClusterCredentialsLister(indexer cache.Indexer) ClusterCredentialsLister {
	return &clusterCredentialsLister{indexer: indexer}
}

// List lists all ClusterCredentialses in the indexer.
func (s *clusterCredentialsLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCredentials, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCredentials))
	})
	return ret, err
}

// ClusterCredentialses returns an object that can list and get ClusterCredentialses.
func (s *clusterCredentialsLister) ClusterCredentialses(namespace string) ClusterCredentialsNamespaceLister {
	return clusterCredentialsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterCredentialsNamespaceLister helps list and get ClusterCredentialses.
type ClusterCredentialsNamespaceLister interface {
	// List lists all ClusterCredentialses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCredentials, err error)
	// Get retrieves the ClusterCredentials from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterCredentials, error)
	ClusterCredentialsNamespaceListerExpansion
}

// clusterCredentialsNamespaceLister implements the ClusterCredentialsNamespaceLister
// interface.
type clusterCredentialsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterCredentialses in the indexer for a given namespace.
func (s clusterCredentialsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCredentials, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCredentials))
	})
	return ret, err
}

// Get retrieves the ClusterCredentials from the indexer for a given namespace and name.
func (s clusterCredentialsNamespaceLister) Get(name string) (*v1alpha1.ClusterCredentials, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustercredentials"), name)
	}
	return obj.(*v1alpha1.ClusterCredentials), nil
}
